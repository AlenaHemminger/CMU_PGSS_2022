# -*- coding: utf-8 -*-
"""SeatBeltStudy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jZIf5HSW26XpY4BbPeLgzXxLOH2eyBss
"""



"""#Reading Code from Google Drive"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
df = pd.read_csv("/content/gdrive/MyDrive/CS WS Lab/PGSS2022/L2--7-1-2022/britishSeatBeltStudy.csv")
df

df['law'] = df['law'].astype('category')
df['Date'] = pd.to_datetime(df['Date'], format='%Y/%m/%d')
df.info()

df.boxplot('DriversKilled', 'law')

df['FractionOfDriversKilled'] = df['DriversKilled']/ df['drivers']
df['FractionOfDriversKilled'].describe()

df.boxplot('FractionOfDriversKilled', 'law')

#Colormap scatterplot: 
df.plot.scatter(x = 'Date', y = 'DriversKilled', c = 'law', colormap = 'viridis')

df.plot.scatter(x = 'Date', y = 'FractionOfDriversKilled', c = 'law', colormap = 'viridis')

df['Date'].describe()

df.plot.scatter(x = 'drivers', y = 'DriversKilled', c = 'law', colormap = 'viridis')

df.boxplot('kms', 'law')

df.plot.scatter(x = 'Date', y = 'kms', c = 'law', colormap = 'viridis')



df.boxplot('kms', 'law')

from sklearn.linear_model import LogisticRegression 
from sklearn import metrics

X=df[['FractionOfDriversKilled', 'kms']]  # Features
y=df['law'].astype('category')  # Labels

myModel = LogisticRegression()
myModel.fit(X,y)

y_pred = myModel.predict([[0.1, 100]])[0]
y_pred

y_pred = myModel.predict([[0.01, 100]])[0]
y_pred

from sklearn.metrics import classification_report
y_pred_proba = myModel.predict_proba(X)[:,1]
y_pred = myModel.predict(X)

# cr = classification_report(y, y_pred>0.15)
cr = classification_report(y, y_pred)
print(cr)

temp = pd.DataFrame({'Class': y, 'Proba': y_pred_proba})

temp.boxplot('Proba', 'Class')

cr = classification_report(y, 1-(y_pred_proba>(0.12)))
print(cr)

import numpy as np
import matplotlib.pyplot as plt

norma = np.array(y_pred_proba)
norma /= norma.max()

from sklearn.metrics import roc_curve, auc
fpr, tpr, _ = roc_curve(y, 1-norma)
roc_auc = auc(fpr, tpr)

plt.show()
lw = 2
plt.plot(
    fpr,
    tpr,
    color="darkorange",
    lw=lw,
    label="ROC curve (area = %0.2f)" % roc_auc,
)
plt.plot([0, 1], [0, 1], color="navy", lw=lw, linestyle="--")
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver operating characteristic example")
plt.legend(loc="lower right")
plt.show()

pd.crosstab(temp['Class'], 1-((temp['Proba'])>0.12))